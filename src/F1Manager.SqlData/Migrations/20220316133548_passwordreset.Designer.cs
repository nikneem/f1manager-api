// <auto-generated />
using System;
using F1Manager.SqlData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace F1Manager.SqlData.Migrations
{
    [DbContext(typeof(F1ManagerDbContext))]
    [Migration("20220316133548_passwordreset")]
    partial class passwordreset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("F1Manager.SqlData.Entities.ChassisPointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QualificationPoints")
                        .HasColumnType("int");

                    b.Property<int>("RacePoints")
                        .HasColumnType("int");

                    b.Property<int>("SprintRacePoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ChassisPoints");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.CircuitEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FirstGrandPrix")
                        .HasColumnType("int");

                    b.Property<string>("LapRecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(5,3)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLaps")
                        .HasColumnType("int");

                    b.Property<decimal>("RaceDistance")
                        .HasColumnType("decimal(7,3)");

                    b.HasKey("Id");

                    b.ToTable("Circuits");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.DriverPointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QualificationPoints")
                        .HasColumnType("int");

                    b.Property<int>("RacePoints")
                        .HasColumnType("int");

                    b.Property<int>("SprintRacePoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DriverPoints");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.EnginePointEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("QualificationPoints")
                        .HasColumnType("int");

                    b.Property<int>("RacePoints")
                        .HasColumnType("int");

                    b.Property<int>("SprintRacePoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EnginePoints");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.RaceDriverResultsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChassisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("QualificationResult")
                        .HasColumnType("int");

                    b.Property<int>("RaceResult")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceWeekendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SprintRaceResult")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RaceWeekendId");

                    b.ToTable("RaceDriverResults");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.RaceEventEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CircuitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Practice01")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Practice02")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("Practice03")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Qualification")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Race")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SprintRace")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CircuitId");

                    b.ToTable("RaceEvents");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.RaceResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("FastestLapDriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasHalfPoints")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("RaceWeekendId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RaceWeekendId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamChassisEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BoughtFor")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset>("BoughtOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("ChassisId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsGained")
                        .HasColumnType("int");

                    b.Property<decimal?>("SoldFor")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("SoldOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WarnOffPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamChassis");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamDriverEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BoughtOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFirstDriver")
                        .HasColumnType("bit");

                    b.Property<int>("PointsGained")
                        .HasColumnType("int");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("SellingPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("SoldOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamDrivers");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamEngineEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BoughtFor")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset>("BoughtOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PointsGained")
                        .HasColumnType("int");

                    b.Property<decimal?>("SoldFor")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTimeOffset?>("SoldOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("WarnOffPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamEngine");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<decimal>("Money")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.RaceDriverResultsEntity", b =>
                {
                    b.HasOne("F1Manager.SqlData.Entities.RaceEventEntity", "RaceEvent")
                        .WithMany("DriverResults")
                        .HasForeignKey("RaceWeekendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceEvent");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.RaceEventEntity", b =>
                {
                    b.HasOne("F1Manager.SqlData.Entities.CircuitEntity", "Circuit")
                        .WithMany("RaceEvents")
                        .HasForeignKey("CircuitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circuit");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.RaceResultEntity", b =>
                {
                    b.HasOne("F1Manager.SqlData.Entities.RaceEventEntity", "RaceEvent")
                        .WithMany("Results")
                        .HasForeignKey("RaceWeekendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaceEvent");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamChassisEntity", b =>
                {
                    b.HasOne("F1Manager.SqlData.Entities.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamDriverEntity", b =>
                {
                    b.HasOne("F1Manager.SqlData.Entities.TeamEntity", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamEngineEntity", b =>
                {
                    b.HasOne("F1Manager.SqlData.Entities.TeamEntity", "Team")
                        .WithMany("Engines")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.CircuitEntity", b =>
                {
                    b.Navigation("RaceEvents");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.RaceEventEntity", b =>
                {
                    b.Navigation("DriverResults");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("F1Manager.SqlData.Entities.TeamEntity", b =>
                {
                    b.Navigation("Engines");
                });
#pragma warning restore 612, 618
        }
    }
}
